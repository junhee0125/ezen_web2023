package java1.day13.Ex1;
/* 클래스 : 설계도 목적
   설계도의 목적도 다양할수 있다. : 데이터 모델링할 때 / 기능패턴을 구분할때
   		- 필드 중심인지 
   		- 기능 중심인지..
   클래스의 구성멤버 :  필드 / 생성자 / 메소드
   소프트웨어 아키텍쳐 (패턴)
 */
public class Board {
	//객체
	/*
	 	클래스 / 클래스    ----new ----->	인스턴스  /객체
 	 	[개발자 작성] 		인스턴스화
 	 	- new연산자를 쓰기 전까지는 메모리 할당이 안됨
 	 	- 인스턴스 필드 : 객체 필드
 	 */
	//1.필드 : 객체의 데이터를 저장하는 곳
		/*
		 	변수와 비슷하지만 다른거임.
		 	- 필드의 종류
		 		- 인스턴스필드 : 객체 생서 객체 안에 저장되어 있는 필드  -> 힙에 저장
		 		- 정적필드: static 프로그램 실행시 ( 메모리가 )우선할당 객체없이 저장되는 필드 -->메소드 영역에 저장
		 	
		 	- 필드의 접근제한자 [범위] : 외부에서 해당 필드를 접근할 수 있는 제한 / 권한
		 		public	: 전범위, 프로젝트 모든 곳.
		 		private : 현재 클래스
				default : default로 선언하지는 않음. 그냥 암것도 안쓰면 / 동일 패키지 내에서만
			- 기타 키워드	
				- final 	:수정불가 / 최종적 필드 만든때
				-static final : 프로그램 전체에서 상수 만들기
			
			- 싱글톤 	: 프로그램(or 프로젝트)내에 1개만 존재하는 객체
				1. 객체 생성 private static을 사용해서 객체를 선언함
				2. 외부에서 꺼내서 쓸수 있도록) public static getInstance() 싱크톤 객체를 반환해주는 함수
				3. private 생성자() : 외부로부터 자동생성되지 않게 생성자를 만들어둠.
				
			- 필드랑 지역변수 뭐가 달라요??
			- 필드엔 뭘 저장할 수 있는데요??
			- 필드의 타입 (필드에 저장할 수 있는 타입에는)
			 	- 기본타입 : boolean long char int double flaot byte short
			 	- 참조타입 : 클래스[객체], 인터페이스 ,  배열, 열거타입 등드으드으라ㅣ;낭;ㄹ
				
			
							
		 */
	
	//2.생성자 : 객체 초기화 할때 사용
		/*
		 	- 생성자가 언제 사용되나요?? 객체 선언할 때
		 		클래스명 객체변수명 = new 생성자명();
		 		
		 	- 생성자의 역할이 머예여?
		 		1. 객체 생성시 매개변수를 받아서 필드에 저장할 때 사용
		 		2. 유효설 검사나 복잡한 값(계산식이 필요한)을  필드에  저장해야 할때
		 	
		 	- 생성자 종류 [오버로딩으로 다양하게 선언 가능]
		 		- 오버로딩이 뭐예여?
		 			- 식별자명 ( 생성자명/ 함수명 /변수명...)이 동일하면 안되는데
		 			- 식별자명이 같더라도 매개변수의 개수와 순서 타입에 따라 식별이 가능하게 해주는 것
		 			
		 	- 생성자가 쓸수 있는 접근제한자는 뭐가 있어여?
		 		- private , public, default
		 		- 생성자는 무조끈 부모따라감..
		 		
		 	- 생성자 어떻게 선언해요?
		 		접근제한자 클래스명( 타입 매개변수. 타입매개변수) {}
		 		
		 	- 기타 키워드
		 		- this	: 생략가능 ) 현재 클래스의 구성멤버 실별할 대 사용
		 		- this	: 외부로부터 들어온 매개변수명과 현재 클래스내 필드명이 같을때 필드를 식별할때
		 			this.필드명  = 매개변수;
		 		- this(): 현재 클래스의 생성자 호출할때
		 		- this.메소드명(); 현재 클래스의 메소드 호출
		 		
		 */
	//3.메소드 : 객체의 행동/동작 수행할 때 사용
	
	/*
	  	- 메소드도  종류가 있데
	  		- 인스턴스 메소드 :  객체 생성후 사용 가능한 메소드
	  		- 정적메소드 : (static) 객체 없이 사용 가능한 메소드
	  	
	  	- 메소드 어케 선언??
	  		접근 제한자  리턴타입 메소드명 ( 매개변수의 타입 매개변수) {}	  		

	  		
	  		- 접근제한자 뭐쓸수 있어?
	  			public, private, default, protected
	  			
	  		-리턴타입 머여여?
	  			- 메소드 종료되면 메소드를 호출했던 곳으로 반환해는 값의 타입인데
	  			- int인지 String인지..불린인지..기타 등등인지..정해야한다는 거지
	  			- 반드시 리턴이 필요한것은 아니여서 필수는 아니지만
	  			- 만약 리턴을 안할거라면 
	  		 	>>  접근제한자 void 메소드 명 (매개변수) <-- void로 선언해줘야 ㅎㅁ
	  		
	  		- 메개변수는
	  		 	- 메소드를 호출할때 메소드랑 같이 던져주는 값이야.
	  		 	- 메소드는 이 변수값을 받아서 로직을 처리하기때문에
	  		 	- 매개변의 갯수와, 타입, 순서를 꼭 체크해야되
	  		
	  		- {} : << 이 괄호 안에 메소드의 로직을 작성해야되
	  		
	  		 	
	  	- 메소드를 왜 써야되요?
	  	 1. 객체 간의 상호작용을 할 수 있어 : 서로 다른 객체간에 데이터를 줄 수 있다는 거지
	  	 2. 재활용:  메소드로 정의해놓고 메소드를 불러쓰면 되니깐 재사용이 무한 가능하다는 거지
	  	 3. 매개변수를 어떻게 쓰느냐에 따라서 서로 다른 결과값을 반환하게 할수 있어
	  	 
	  	- 외부객체에서 메소드를 호출하는 방법
	  		1. 객체를 이용한 인스턴스 메소드 호출
	  			클래스명 객체변수명 = new 생성자명();
	  			객체변수명 .메소드명();
	  		2. 객체없이 정적 메소드 호출
	  			클래스명.메소드명();
	  		3. 싱글톤 객체 내 인스턴스 메소드 호출	
	  			클래스명.getInstance().메소드();
	 */
	
	/*
	 	-필드, 생성자, 메소드를 이용한 프로그램 개발
	 	- MVC 디자인패턴 >>  기능역할에 따라 구분한 것임
	 		v : view 입출력을 담당해  : 당분간 우린 print 와 Scanner를 많이 쓰게 되는 영역이야
	 			- html,js 언어 사용되는 자리.
	 			- 프론트단.
	 			- 콘솔의 역할 : 지금은 임시로 
	 		c : 제어 / 로직/ 기능처리 / 유효성 검사 를 담당해
	 			- 싱글톤 쓰는 걸 권장해
	 			WHY!
	 				- 객체를 여러개 가질 필요가 없어.같은 기능을 처리하는 경우엔 1개만 만들면 되니까
	 				- 동일한 메소드를 갖는 객체가 여러개일 필요가 없잖아 
	 		M : 데이터 모델과 실제 데이터
	 			DTO : 데이터가 이동하는 객체 
	 				1. 서로다른 여러개의 타입을 이동시키면 불편해
	 				2. 이걸 하나의 객체로 만들어서 이동시키기 위함.
	 					- 서로다른 레어간에 이동할때 사용하는 객체
	 					- 데이터를 이동시킬때 패키징하는 역할
	 				3. DTO 가독성??
	 					- memberDto : 회원객체인데 이동객체이군...
	 					- member : 회원객체군.. 근데..뭐하는 class??
	 			DAO : 데이터 접근 객체 [실제 원본 데이터 - DB]
	 		- MVC패턴의 장단점
	 			- 설계가 복잡하고  개발자가  패턴에 대한 이해가 있어야 가능
	 			- 하지만 이 패턴으로 개발이 되면 유지보수관리, 업무이전에 있어서 매우 수월해짐.
	 		
	 */

}
